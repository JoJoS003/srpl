#!/usr/bin/env ruby
#encoding=utf-8

$LOAD_PATH.unshift(File.dirname(__FILE__) + "/../lib")

require 'srpl'
require 'yaml'
require 'erb'
require 'pp'

include SRPL

class SRPL_CLI
  
  attr_reader :league
  attr_accessor :tpl_path
  
  def initialize(plist = nil)
    @file = 'league.yml'
    from_players(plist.to_s) if plist

    game = File.basename(Dir.pwd)
    @tpl_path = "#{File.dirname(__FILE__)}/../tpl/#{game}"
  end
  
  def load
    @league = @file ? YAML::load(File.read(@file)) : League.new
  end
  
  def save
    File.write(@file, YAML::dump(@league))
  end
  
  def rank
    players = @league.rank
    template('rank').result(binding)
  end
  
  def characters
    persos = {}
    @league.players.each do |p|
      persos[p.character] = persos[p.character] ? persos[p.character] + 1 : 1
    end
    persos = persos.sort_by {|perso, nbr| nbr}.reverse!
    
    template('characters').result(binding)
  end
  
  def rounds
    output = ''
    @league.rounds.reverse.each do |round|
      output += template('rounds').result(binding)
    end
    output
  end
  
  private 
  
  def from_players(file)
    reg = /^(?<nick>[\w\s]+) <(?<email>[\w\d\-_.]+@[\w\d-_.]+\.[\w]{2,4})> : (?<chara>[\w\. \-]+)$/

    @league = League.new

    File.open(file, 'r') do |io|
      io.lines do |line|
        m = reg.match line
        @league.add_player(Player.new(m['nick'], m['chara'], m['email'])) if m
      end
    end
    
    @league
  end
  
  def perso_img(perso)
    "http://shoryupif.fr/wp-content/uploads/2012/07/sprite_#{perso.downcase}.png"
  end
  
  def format_date(date)
    format_in = "%Y%m%d%H%M"
    format_out = "%d/%m/%Y à %Hh%M"
    
    date ? DateTime.strptime(date, format_in).strftime(format_out) : 'à venir'
  end
  
  def template(name)
    ERB.new(File.read(File.join(@tpl_path, "#{name}.html.erb")))
  end
  
end

# Get the template path if defined if first option
if ARGV[0] == '--template-path'
  ARGV.shift
  tpl_path = ARGV.shift
end

cli = ARGV[0] == 'init' ? SRPL_CLI.new(ARGV[1]) : SRPL_CLI.new

case ARGV.shift
  when 'init' then cli.save
  when 'round' then p cli.load.round
  when 'rank' then 
    cli.load
    puts cli.rank
  when 'characters' then
    cli.load
    puts cli.characters
  when 'rounds' then
    cli.load
    puts cli.rounds
  when 'finish' then
    cli.load
    puts cli.finish *ARGV
  when 'all' then
    cli.load
    puts cli.characters
    puts cli.rank
    puts cli.rounds
end
